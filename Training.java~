import java.io.*;
import java.util.Random;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;

import MyLib.*;

public class Training {

	static String FileCost  = "weights.dat";
	static String FileTrain = "training-samples.dat";

    // Original image size
	static int width        = 92;
	static int height       = 112;  
	
	// Resize to this size
	static int NewWidth     = 40;
	static int NewHeight    = 50;

	static int n1 = 2000;   // Input Layer
	static int n2 = 120;    // Hidden Layer
	static int n3 = 40;     // Output Layer
	
	// Neural network parameters
	static double Momentum      = 0.9;
	static int Cycle            = 512;
	static double LearningRate  = 1e-3;
	static double Epsilon       = 1e-3;
	
	static double input[]   = new double [n1];
	static double output[]  = new double [n3];
	
	static int scale[][]    = new int [width][height];
	static int NewScale[][] = new int [NewWidth][NewHeight];

	static NeuralNetwork ANN;
	
	public static void Feature(String s) throws IOException{
		PGM256.GetGrayScale(s, scale, width, height);
		Normalization.Resize(scale,NewScale,width,height,NewWidth,NewHeight);
		int i = 0;
		for (int x=0;x<NewWidth;x++)
			for (int y=0;y<NewHeight;y++){
				input[i]=(double)(NewScale[x][y])/(double)(255);
				i++;
			}
	}
	
	public static void main(String args[]) throws IOException{
		double Error;
		String s;
		int value;
		
		ANN = new NeuralNetwork(n1, n2, n3);
		ANN.SetMomentum(Momentum);
		ANN.SetCycle(Cycle);
		ANN.SetLearningRate(LearningRate);
		ANN.SetEpsilon(Epsilon);
		
		TextFileReader f = new TextFileReader();
		
		for (int i=1;i<=nTime;i++){
			f.open(FileTrain);
			
			int v = 0;
			while (true){
				s = f.ReadLine();
				if (s==null) break;
				
				value = Integer.parseInt(s);
				for (int j=0;j<n3;j++) output[j] = 0.0;
				output[value-1] = 1.0;
				
				s = f.ReadLine();
				Feature(s);
		
				ANN.Study(input,output);
			
				Error=ANN.SquareError();
				v++;
				System.out.println("Sample "+v+" of Cycle "+i);
				System.out.print(s+": ");
				System.out.format("%.9f\n",Error);
				System.out.println();
			}
			
			f.close();
		}
		
		ANN.WriteCost(FileCost);
	}

}
